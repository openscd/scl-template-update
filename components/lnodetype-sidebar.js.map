{"version":3,"file":"lnodetype-sidebar.js","sourceRoot":"","sources":["../../components/lnodetype-sidebar.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { LitElement, html, css } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { ScopedElementsMixin } from '@open-wc/scoped-elements/lit-element.js';\n\nimport { MdOutlinedButton } from '@scopedelement/material-web/button/outlined-button.js';\nimport { MdOutlinedTextField } from '@scopedelement/material-web/textfield/MdOutlinedTextField.js';\nimport { MdList } from '@scopedelement/material-web/list/MdList.js';\nimport { MdListItem } from '@scopedelement/material-web/list/MdListItem.js';\n\nexport class LNodeTypeSidebar extends ScopedElementsMixin(LitElement) {\n  static scopedElements = {\n    'md-outlined-button': MdOutlinedButton,\n    'md-outlined-textfield': MdOutlinedTextField,\n    'md-list': MdList,\n    'md-list-item': MdListItem,\n  };\n\n  @property({ type: Array })\n  lNodeTypes: Element[] = [];\n\n  @property({ type: String })\n  selectedId?: string;\n\n  @state()\n  filter: string = '';\n\n  private debounceTimer?: number;\n\n  private handleInput(e: Event) {\n    const { value } = e.target as HTMLInputElement;\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = window.setTimeout(() => {\n      this.filter = value;\n    }, 300);\n  }\n\n  private clearFilter() {\n    this.filter = '';\n  }\n\n  private handleClick(id: string) {\n    this.dispatchEvent(\n      new CustomEvent('lnodetype-select', {\n        detail: { id },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  get filteredLNodeTypes(): Element[] {\n    if (!this.filter.trim()) return this.lNodeTypes;\n    // If the filter includes words separated by &, treat as a single AND group (e.g. 'a & b', 'a&b', 'a &b', 'a& b').\n    // Otherwise, split on comma or space (unless adjacent to &), so 'a b' and 'a,b' are separate OR groups.\n    let groups: string[][] = [];\n    const filter = this.filter.toLowerCase().trim();\n    if (/^\\s*\\w+\\s*&\\s*\\w+\\s*$/.test(filter)) {\n      groups = [\n        filter\n          .replace(/\\s*&\\s*/g, '&')\n          .split('&')\n          .filter(Boolean),\n      ];\n    } else {\n      groups = filter\n        .split(/(?<!&)[ ,]+(?!&)/)\n        .map(group =>\n          group\n            .replace(/\\s*&\\s*/g, '&')\n            .split('&')\n            .filter(Boolean)\n        )\n        .filter(group => group.length > 0);\n    }\n\n    if (groups.length === 0) return this.lNodeTypes;\n\n    return this.lNodeTypes.filter(ln => {\n      const id = ln.getAttribute('id')?.toLowerCase() || '';\n      const desc = ln.getAttribute('desc')?.toLowerCase() || '';\n      return groups.some(group =>\n        group.every(term => id.includes(term) || desc.includes(term))\n      );\n    });\n  }\n\n  render() {\n    return html`<div class=\"sidebar\">\n      <div class=\"actions\">\n        <md-filled-button class=\"clear-all\" @click=${this.clearFilter}>\n          Clear filter\n        </md-filled-button>\n      </div>\n      <div class=\"search-filter\">\n        <div class=\"search-container\">\n          <md-outlined-textfield\n            label=\"Filter Logical Node Types\"\n            type=\"text\"\n            placeholder=\"e.g.: TCTR, TVTR&amp;protection\"\n            .value=${this.filter}\n            @input=${this.handleInput}\n            aria-label=\"Filter Logical Node Types\"\n            supporting-text=\"Search by ID or description. Use commas/spaces for OR, use &amp; for AND.\"\n          ></md-outlined-textfield>\n        </div>\n      </div>\n      <md-list>\n        ${this.filteredLNodeTypes.map(ln => {\n          const id = ln.getAttribute('id') || '';\n          const desc = ln.getAttribute('desc') || '';\n          const isSelected = this.selectedId === id;\n          return html`\n            <md-list-item\n              type=\"button\"\n              ?selected=${isSelected}\n              @click=${() => this.handleClick(id)}\n            >\n              <span slot=\"headline\" title=${id}>${id}</span>\n              <span slot=\"supporting-text\">${desc}</span>\n            </md-list-item>\n          `;\n        })}\n      </md-list>\n    </div>`;\n  }\n\n  updated(changedProperties: Map<string, unknown>) {\n    super.updated?.(changedProperties);\n    // Scroll md-list to top when lNodeTypes changes\n    if (changedProperties.has('lNodeTypes')) {\n      const mdList = this.renderRoot.querySelector('md-list');\n      if (mdList) mdList.scrollTop = 0;\n    }\n  }\n\n  static styles = css`\n    .sidebar {\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 auto;\n      min-height: 0;\n      padding: 1rem;\n      overflow: hidden;\n      background-color: #fcf6e5;\n    }\n    md-list {\n      min-height: 0;\n      max-height: 65vh;\n      overflow-y: auto;\n      scrollbar-width: thin;\n      padding: 0;\n    }\n    md-list::-webkit-scrollbar {\n      width: 8px;\n    }\n    md-list::-webkit-scrollbar-thumb {\n      border-radius: 4px;\n    }\n    md-list::-webkit-scrollbar-track {\n      background: transparent;\n    }\n    md-list-item {\n      box-sizing: border-box;\n    }\n    md-list-item[selected] {\n      background: var(--md-sys-color-primary);\n    }\n    md-list-item[selected] span[slot='headline'],\n    md-list-item[selected] span[slot='supporting-text'] {\n      color: var(--md-sys-color-on-primary, #ffffff);\n    }\n    md-outlined-textfield {\n      width: 100%;\n    }\n    .actions {\n      display: flex;\n      flex-direction: row-reverse;\n      margin-bottom: 0.5rem;\n    }\n    .search-filter {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      margin-bottom: 1rem;\n    }\n    .search-container {\n      flex: 1;\n      position: relative;\n    }\n    .clear-all {\n      cursor: pointer;\n      color: var(--md-sys-color-primary, #0078d4);\n      text-decoration: underline;\n      font-size: 0.95em;\n    }\n  `;\n}\n"]}