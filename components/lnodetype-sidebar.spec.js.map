{"version":3,"file":"lnodetype-sidebar.spec.js","sourceRoot":"","sources":["../../components/lnodetype-sidebar.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, html } from '@open-wc/testing';\nimport { LNodeTypeSidebar } from './lnodetype-sidebar.js';\nimport { testLNodeTypesXml } from '../scl-template-update.testfiles.js';\nimport { getLNodeTypes } from '../foundation/utils.js';\n\nwindow.customElements.define('lnodetype-sidebar', LNodeTypeSidebar);\n\ndescribe('LNodeTypeSidebar filtering', () => {\n  let sidebar: LNodeTypeSidebar;\n  let nodes: Element[];\n\n  beforeEach(async () => {\n    const doc = new DOMParser().parseFromString(\n      testLNodeTypesXml,\n      'application/xml'\n    );\n    nodes = getLNodeTypes(doc);\n    sidebar = await fixture(\n      html`<lnodetype-sidebar\n        .lNodeTypes=${nodes}\n        .selectedId=\"\"\n      ></lnodetype-sidebar>`\n    );\n  });\n\n  it('shows all nodes with empty filter', async () => {\n    sidebar.filter = '';\n    expect(sidebar.filteredLNodeTypes.length).to.equal(nodes.length);\n  });\n\n  it('filters with OR (space)', () => {\n    sidebar.filter = 'foo bar';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foo');\n    expect(ids).to.include('bar');\n    expect(ids).to.include('foobar');\n    expect(ids).to.include('qux');\n  });\n\n  it('filters with OR (comma)', () => {\n    sidebar.filter = 'foo,bar';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foo');\n    expect(ids).to.include('bar');\n    expect(ids).to.include('foobar');\n    expect(ids).to.include('qux');\n  });\n\n  it('filters with AND (ampersand)', () => {\n    sidebar.filter = 'foo&bar';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foobar');\n    expect(ids).to.not.include('foo');\n    expect(ids).to.not.include('bar');\n  });\n\n  it('filters with AND (spaces around &)', () => {\n    sidebar.filter = 'foo & bar';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foobar');\n    expect(ids).to.not.include('foo');\n    expect(ids).to.not.include('bar');\n  });\n\n  it('filters with mixed OR/AND', () => {\n    sidebar.filter = 'foo bar&baz';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foo');\n    expect(ids).to.include('foobar');\n    expect(ids).to.include('bar');\n  });\n\n  it('filters with multiple groups', () => {\n    sidebar.filter = 'foo,bar&baz,qux';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foo');\n    expect(ids).to.include('foobar');\n    expect(ids).to.include('bar');\n    expect(ids).to.include('qux');\n  });\n\n  it('is case insensitive', () => {\n    sidebar.filter = 'FOO';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foo');\n    expect(ids).to.include('foobar');\n  });\n\n  it('handles leading/trailing/multiple spaces/commas', () => {\n    sidebar.filter = '  foo  ,  bar  ';\n    const ids = sidebar.filteredLNodeTypes.map(n => n.getAttribute('id'));\n    expect(ids).to.include('foo');\n    expect(ids).to.include('bar');\n  });\n\n  it('returns all nodes for nonsense filter', () => {\n    sidebar.filter = '&&&';\n    expect(sidebar.filteredLNodeTypes.length).to.equal(nodes.length);\n  });\n\n  it('returns no nodes for no match', () => {\n    sidebar.filter = 'notfound';\n    expect(sidebar.filteredLNodeTypes.length).to.equal(0);\n  });\n});\n"]}