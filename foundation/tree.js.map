{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../foundation/tree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAoB,MAAM,0BAA0B,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,SAAS,eAAe,CAAC,GAAgB,EAAE,MAAc;;IACvD,MAAM,aAAa,GAAG,GAAG,CAAC,aAAa,CACrC,0CAA0C,MAAM,IAAI,CACrD,CAAC;IACF,OAAO,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,YAAY,CAAC,KAAK,CAAC,mCAAI,SAAS,CAAC;AACzD,CAAC;AAED,SAAS,cAAc,CAAC,GAAuB;IAC7C,OAAO,CAAC,CAAC,GAAG,IAAK,SAAmC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACrE,CAAC;AAED,SAAS,eAAe,CAAC,MAAc,EAAE,GAAW;IAClD,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IACnC,OAAO;QACL,CAAC,MAAM,CAAC,EAAE;YACR,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,GAAG;YACT,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,WAAW;SACtB;KACF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAS,oBAAoB,CAC3B,IAAS,EACT,SAAkB,EAClB,GAAgB;IAEhB,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG;QAAE,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;IAC5D,MAAM,MAAM,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;IAC3B,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;IACzE,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACtD,MAAM,cAAc,GAAa,EAAE,CAAC;IAEpC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM;YAAE,OAAO;QAC/B,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YACtC,MAAM,GAAG,GAAG,eAAe,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACzC,IAAI,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBACxB,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,MAAM,EAAE,GAAI,CAAC,CAAC,CAAC;YACvD,CAAC;iBAAM,CAAC;gBACN,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC;AAC1C,CAAC;AAED,MAAM,UAAU,cAAc,CAC5B,sBAA8B,EAC9B,SAAkB,EAClB,GAAgB;IAEhB,MAAM,IAAI,GAAG,SAAS,CAAC,sBAAsB,CAAQ,CAAC;IACtD,IAAI,CAAC,IAAI;QAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;IAC1D,OAAO,oBAAoB,CAAC,IAAI,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AACpD,CAAC","sourcesContent":["import { nsdToJson, LNodeDescription } from '@openenergytools/scl-lib';\nimport { cdClasses } from './constants.js';\n\nfunction getCDCForDOType(doc: XMLDocument, doType: string): string | undefined {\n  const doTypeElement = doc.querySelector(\n    `:root > DataTypeTemplates > DOType[id=\"${doType}\"]`\n  );\n  return doTypeElement?.getAttribute('cdc') ?? undefined;\n}\n\nfunction isSupportedCDC(cdc: string | undefined): boolean {\n  return !!cdc && (cdClasses as ReadonlyArray<string>).includes(cdc);\n}\n\nfunction buildDataObject(doName: string, cdc: string) {\n  const cdcChildren = nsdToJson(cdc);\n  return {\n    [doName]: {\n      tagName: 'DataObject',\n      type: cdc,\n      descID: '',\n      presCond: 'O',\n      children: cdcChildren,\n    },\n  };\n}\n\n/**\n * Merges user-defined Data Objects in the NSD tree. This ensures that\n * any custom or extra DOs present in the user's SCL are preserved\n * in the tree, even if they are not part of the NSD definition.\n */\nfunction mergeUserDOsIntoTree(\n  tree: any,\n  lNodeType: Element,\n  doc: XMLDocument\n): { tree: LNodeDescription; unsupportedDOs: string[] } {\n  if (!lNodeType || !doc) return { tree, unsupportedDOs: [] };\n  const result = { ...tree };\n  const doElements = Array.from(lNodeType.querySelectorAll(':scope > DO'));\n  const standardDONames = tree ? Object.keys(tree) : [];\n  const unsupportedDOs: string[] = [];\n\n  doElements.forEach(doEl => {\n    const doName = doEl.getAttribute('name');\n    const doType = doEl.getAttribute('type');\n    if (!doName || !doType) return;\n    if (!standardDONames.includes(doName)) {\n      const cdc = getCDCForDOType(doc, doType);\n      if (isSupportedCDC(cdc)) {\n        Object.assign(result, buildDataObject(doName, cdc!));\n      } else {\n        unsupportedDOs.push(doName);\n      }\n    }\n  });\n  return { tree: result, unsupportedDOs };\n}\n\nexport function buildLNodeTree(\n  selectedLNodeTypeClass: string,\n  lNodeType: Element,\n  doc: XMLDocument\n): { tree: any; unsupportedDOs: string[] } {\n  const tree = nsdToJson(selectedLNodeTypeClass) as any;\n  if (!tree) return { tree: undefined, unsupportedDOs: [] };\n  return mergeUserDOsIntoTree(tree, lNodeType, doc);\n}\n"]}